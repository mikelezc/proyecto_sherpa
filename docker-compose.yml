x-django-common: &django-common
  build:
    context: ./srcs/django
    dockerfile: Dockerfile
  env_file:
    - .env
  volumes:
    - ./srcs/django:/app
  depends_on:
    db:
      condition: service_healthy
    redis:
      condition: service_healthy
  networks:
    - task-management-network
  restart: unless-stopped

networks:
  task-management-network:
    driver: bridge

services:
  db:
    image: postgres:15
    container_name: postgres_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - task-management-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  redis:
    image: redis:7-alpine
    container_name: redis_cache
    ports:
      - "6379:6379"
    networks:
      - task-management-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  web:
    <<: *django-common
    container_name: django_web
    ports:
      - "8000:8000"
    volumes:
      - ./srcs/django:/app
    command: python entrypoint.py
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health/', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  celery-worker:
    <<: *django-common
    container_name: celery_worker
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      web:
        condition: service_healthy
    command: celery -A main worker --loglevel=info
    healthcheck:
      test: ["CMD", "celery", "-A", "main", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  celery-beat:
    <<: *django-common
    container_name: celery_beat
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      web:
        condition: service_healthy
    command: celery -A main beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    healthcheck:
      test: ["CMD", "celery", "-A", "main", "inspect", "stats"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

volumes:
  postgres_data:
  redis_data:
